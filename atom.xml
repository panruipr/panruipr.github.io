<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ThrowsException的个人博客</title>
  <icon>https://www.gravatar.com/avatar/5609bc06c51c9009d04648504ea05dba</icon>
  <subtitle>Work And Life,Code And Book</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://panruipr.github.io/"/>
  <updated>2018-10-08T08:27:14.817Z</updated>
  <id>https://panruipr.github.io/</id>
  
  <author>
    <name>rui Pan</name>
    <email>panrui1993616@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java线程池的简单使用笔记</title>
    <link href="https://panruipr.github.io/2018/10/08/ThreadPool/"/>
    <id>https://panruipr.github.io/2018/10/08/ThreadPool/</id>
    <published>2018-10-08T07:02:20.000Z</published>
    <updated>2018-10-08T08:27:14.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java线程池的简单使用以及自己的理解"><a href="#java线程池的简单使用以及自己的理解" class="headerlink" title="java线程池的简单使用以及自己的理解"></a>java线程池的简单使用以及自己的理解</h3><p>​    线程池，装线程的池子。管理线程，如果池子中有空闲的线程，则可以直接拿来用，避免重复创建线程，销毁线程，浪费资源。尤其是在并发量比交高的时候，也可以一定程度上控制数据库连接数。</p><h5 id="1-创建线程池"><a href="#1-创建线程池" class="headerlink" title="1.创建线程池"></a>1.创建线程池</h5><p>​    建议使用单例模式创建线程池，一个程序中线程池存在一个比较好，感觉使用多个线程池和多线程差不多了，意义不大。使用一个线程池，线程最大连接数量可以固定不会超出峰值。</p><p>​    创建线程池有多种方法，这里不深究，对参数做下说明：</p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td>corePoolSize</td><td>核心连接数</td></tr><tr><td>maximumPoolSize</td><td>最大连接数</td></tr><tr><td>keepAliveTime</td><td>空闲时间</td></tr><tr><td>unit</td><td>时间类型</td></tr><tr><td>workQueue</td><td>阻塞式任务队列</td></tr></tbody></table><p>​    正在执行的线程最多为线程池的最大连接数，一但超过最大连接数，将会进入阻塞式任务队列中，等待当前线程执行完再执行任务，任务队列中有个数值，等待执行的任务数。一般建议是使用LinkedBlockingQueue，据说拥有比ArrayBlockingQueue更高的吞吐量。稳定性不太好，具体没研究</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> x_panrui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018-09-21 17:24:18</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bizlet</span>(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglePoolThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor executor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SinglePoolThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的构造函数存根</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  ThreadPoolExecutor <span class="title">getInstacnce</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(SinglePoolThread.class)&#123;</span><br><span class="line"><span class="keyword">if</span>(executor==<span class="keyword">null</span>)&#123;</span><br><span class="line">executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">4</span>, <span class="number">5</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-创建线程类"><a href="#2-创建线程类" class="headerlink" title="2.创建线程类"></a>2.创建线程类</h5><p>​    创建线程实现Runable接口或者继承Thread类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">updatePushReport();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">synchronized</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updatePushReport</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//逻辑代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">super</span>.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-使用线程池的execute方法执行线城实例"><a href="#3-使用线程池的execute方法执行线城实例" class="headerlink" title="3.使用线程池的execute方法执行线城实例"></a>3.使用线程池的execute方法执行线城实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flexReportThread reportThread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">excExecutor.execute(reportThread);</span><br><span class="line">System.out.println(<span class="string">"线程池中线程数目："</span>+excExecutor.getPoolSize()+<span class="string">"，队列中等待执行的任务数目："</span>+</span><br><span class="line">excExecutor.getQueue().size()+<span class="string">"，已执行玩别的任务数目："</span>+excExecutor.getCompletedTaskCount());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;java线程池的简单使用以及自己的理解&quot;&gt;&lt;a href=&quot;#java线程池的简单使用以及自己的理解&quot; class=&quot;headerlink&quot; title=&quot;java线程池的简单使用以及自己的理解&quot;&gt;&lt;/a&gt;java线程池的简单使用以及自己的理解&lt;/h3&gt;&lt;p&gt;​ 
      
    
    </summary>
    
    
      <category term="Java" scheme="https://panruipr.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>使用java中的email工具类发送邮件</title>
    <link href="https://panruipr.github.io/2018/10/08/sendEmail/"/>
    <id>https://panruipr.github.io/2018/10/08/sendEmail/</id>
    <published>2018-10-08T05:21:07.000Z</published>
    <updated>2018-10-08T06:41:02.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用java工具类email基于smpt（简单邮件传输协议）实现邮件发送"><a href="#使用java工具类email基于smpt（简单邮件传输协议）实现邮件发送" class="headerlink" title="使用java工具类email基于smpt（简单邮件传输协议）实现邮件发送"></a>使用java工具类email基于smpt（简单邮件传输协议）实现邮件发送</h3><h4 id="1-设置session属性"><a href="#1-设置session属性" class="headerlink" title="1.设置session属性"></a><strong>1.设置session属性</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置属性</span></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.setProperty(<span class="string">"mail.host"</span>,<span class="string">"xxxx.com"</span>);<span class="comment">//使用邮件服务器</span></span><br><span class="line">prop.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);<span class="comment">//协议为SMPT协议</span></span><br><span class="line">prop.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);<span class="comment">//是否需要验证</span></span><br></pre></td></tr></table></figure><h4 id="2-获取session对象"><a href="#2-获取session对象" class="headerlink" title="2.获取session对象"></a><strong>2.获取session对象</strong></h4><p>获取session对象这里有两中方式Session.getInstance(prop)和Session.getInstance(props, authenticator);</p><h6 id="1-Session-getInstance-prop-。（本文以这种方式连接，貌似没有授权）"><a href="#1-Session-getInstance-prop-。（本文以这种方式连接，貌似没有授权）" class="headerlink" title="1.Session.getInstance(prop)。（本文以这种方式连接，貌似没有授权）"></a><em>1.Session.getInstance(prop)。（本文以这种方式连接，貌似没有授权）</em></h6><p>使用这种方式需要获取Transport对象调用connect方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Session session = Session.getInstance(prop);</span><br><span class="line"><span class="comment">//开启Session的debug模式，这样就可以查看到程序发送Email的运行状态</span></span><br><span class="line">session.setDebug(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//2、通过session得到transport对象</span></span><br><span class="line">Transport ts = session.getTransport();</span><br><span class="line"><span class="comment">//3、使用邮箱的用户名和密码连上邮件服务器，发送邮件时，发件人需要提交邮箱的用户名和密码给smtp服务器，用户名和密码都通过验证之后才能够正常发送邮件给收件人。</span></span><br><span class="line">ts.connect(<span class="string">"xxxx.com"</span>, <span class="string">"user"</span>,<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//ts.connect("xxxx.com","port", "user","password");带服务器端口</span></span><br></pre></td></tr></table></figure><h6 id="2-Session-getInstance-props-authenticator-（授权信息）"><a href="#2-Session-getInstance-props-authenticator-（授权信息）" class="headerlink" title="2.Session.getInstance(props, authenticator);（授权信息）"></a><em>2.Session.getInstance(props, authenticator);（授权信息）</em></h6><p>在创建邮件会话的时候将授权信息带进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prop.setProperty(<span class="string">"mail.user"</span>, <span class="string">"xxxxxxx@qq.com"</span>);<span class="comment">//用户名</span></span><br><span class="line">prop.setProperty(<span class="string">"mail.password"</span>, <span class="string">"xxxxxxxxxxxxxxxxxxx"</span>);<span class="comment">//授权码</span></span><br><span class="line"><span class="comment">// 构建授权信息，用于进行SMTP进行身份验证</span></span><br><span class="line">Authenticator authenticator = <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         String userName = prop.getProperty(<span class="string">"mail.user"</span>);</span><br><span class="line">         String password = prop.getProperty(<span class="string">"mail.password"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(userName, password);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 使用环境属性和授权信息，创建邮件会话</span></span><br><span class="line"> Session mailSession = Session.getInstance(prop, authenticator);</span><br></pre></td></tr></table></figure><h4 id="3-往邮件中填充内容"><a href="#3-往邮件中填充内容" class="headerlink" title="3.往邮件中填充内容"></a>3.往邮件中填充内容</h4><p>创建邮件对象Message，多重消息使用Multipart对象，使用addBodyPart（）方法添加多重消息体，最后将多重消息放进Message的Content属性中。完整代码如下，<strong>需要注意的是附件中文名称需要用MimeUtility解码</strong></p><p>这里由于服务器路径文件名是中文转码后的随机数，但是发送附件需要中文，所以自己做了处理，内容也是用对象传递过来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.activation.DataHandler;</span><br><span class="line"><span class="keyword">import</span> javax.activation.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.activation.FileDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.mail.BodyPart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Message;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Multipart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeBodyPart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMultipart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeUtility;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(JSONObject mailInfo)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//设置属性</span></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    prop.setProperty(<span class="string">"mail.host"</span>, mailInfo.getString(<span class="string">"smtpHost"</span>));</span><br><span class="line">    prop.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);</span><br><span class="line">    prop.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">    <span class="comment">//使用JavaMail发送邮件的5个步骤</span></span><br><span class="line">    <span class="comment">//1、创建session</span></span><br><span class="line">    Session session = Session.getInstance(prop);</span><br><span class="line">    <span class="comment">//开启Session的debug模式，这样就可以查看到程序发送Email的运行状态</span></span><br><span class="line">    session.setDebug(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//2、通过session得到transport对象</span></span><br><span class="line">    Transport ts = session.getTransport();</span><br><span class="line">    <span class="comment">//3、使用邮箱的用户名和密码连上邮件服务器，发送邮件时，发件人需要提交邮箱的用户名和密码给smtp服务器，用户名和密码都通过验证之后才能够正常发送邮件给收件人。</span></span><br><span class="line">    ts.connect(mailInfo.getString(<span class="string">"smtpHost"</span>), mailInfo.getString(<span class="string">"userName"</span>), mailInfo.getString(<span class="string">"password"</span>));</span><br><span class="line">    <span class="comment">//4、创建邮件</span></span><br><span class="line">    MimeMessage message = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">    <span class="comment">//设置发件箱</span></span><br><span class="line">    message.setFrom(<span class="keyword">new</span> InternetAddress(mailInfo.getString(<span class="string">"from"</span>)));</span><br><span class="line">    <span class="comment">//设置主题</span></span><br><span class="line">    message.setSubject(mailInfo.getString(<span class="string">"subject"</span>));</span><br><span class="line">    <span class="comment">//设置收件人</span></span><br><span class="line">    List&lt;String&gt; recivePersons = mailInfo.getList(<span class="string">"to"</span>);</span><br><span class="line">    System.out.println(<span class="string">"recive Person address:"</span> + recivePersons.toString());</span><br><span class="line">    InternetAddress[] reciveAddress = <span class="keyword">new</span> InternetAddress[recivePersons.size()];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;recivePersons.size();i++)&#123;</span><br><span class="line">    reciveAddress[i] = <span class="keyword">new</span> InternetAddress(recivePersons.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置抄送人</span></span><br><span class="line">    List&lt;String&gt; ccPerson = mailInfo.getList(<span class="string">"cc"</span>);</span><br><span class="line">    InternetAddress[] ccPersonAddress = <span class="keyword">new</span> InternetAddress[ccPerson.size()];</span><br><span class="line">    <span class="keyword">if</span>(ccPerson!=<span class="keyword">null</span>)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;ccPerson.size();j++)&#123;</span><br><span class="line">        ccPersonAddress[j] = <span class="keyword">new</span> InternetAddress(ccPerson.get(j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    message.setRecipients(Message.RecipientType.TO, reciveAddress);</span><br><span class="line">    message.setRecipients(Message.RecipientType.CC, ccPersonAddress);</span><br><span class="line">    <span class="comment">//多重消息</span></span><br><span class="line">    Multipart multipart = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line">    <span class="comment">//正文</span></span><br><span class="line">    BodyPart messageBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">    messageBodyPart.setText(mailInfo.getString(<span class="string">"message"</span>));</span><br><span class="line">    multipart.addBodyPart(messageBodyPart);</span><br><span class="line">    <span class="comment">//附件</span></span><br><span class="line">    List&lt;String&gt; attachFilePaths = mailInfo.getList(<span class="string">"attachFilePaths"</span>);</span><br><span class="line">    <span class="keyword">if</span>(attachFilePaths!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;attachFilePaths.size();y++)&#123;</span><br><span class="line">            System.out.println(attachFilePaths.get(y).toString());</span><br><span class="line">            String[] fileInfo = attachFilePaths.get(y).split(<span class="string">";"</span>);</span><br><span class="line">            BodyPart attachFileBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">            <span class="comment">//将文件路径转换成数据源</span></span><br><span class="line">            DataSource dataSource = <span class="keyword">new</span> FileDataSource(fileInfo[<span class="number">0</span>]);</span><br><span class="line">            attachFileBodyPart.setDataHandler(<span class="keyword">new</span> DataHandler(dataSource));</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.isNotBlank(fileInfo[<span class="number">1</span>]))&#123;</span><br><span class="line">            <span class="comment">//这里需要用MimeUtility来将附件中文名称进行解码,以防止附件名称出现乱码的问题</span></span><br><span class="line">  attachFileBodyPart.setFileName(MimeUtility.encodeWord(fileInfo[<span class="number">1</span>]+fileInfo[<span class="number">0</span>].substring(fileInfo[<span class="number">0</span>].lastIndexOf(<span class="string">"."</span>),fileInfo[<span class="number">0</span>].length())));</span><br><span class="line">            &#125;</span><br><span class="line">            multipart.addBodyPart(attachFileBodyPart);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    message.setContent(multipart);</span><br><span class="line">    <span class="comment">//5、发送邮件</span></span><br><span class="line">    ts.sendMessage(message, message.getAllRecipients());</span><br><span class="line">    <span class="comment">//6、关闭连接</span></span><br><span class="line">    ts.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用java工具类email基于smpt（简单邮件传输协议）实现邮件发送&quot;&gt;&lt;a href=&quot;#使用java工具类email基于smpt（简单邮件传输协议）实现邮件发送&quot; class=&quot;headerlink&quot; title=&quot;使用java工具类email基于smpt
      
    
    </summary>
    
    
      <category term="Java" scheme="https://panruipr.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java中使用poi来生成excel</title>
    <link href="https://panruipr.github.io/2018/10/08/PoiCreateExcel/"/>
    <id>https://panruipr.github.io/2018/10/08/PoiCreateExcel/</id>
    <published>2018-10-08T05:21:07.000Z</published>
    <updated>2018-10-09T05:18:20.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用poi根据模板生成excel"><a href="#使用poi根据模板生成excel" class="headerlink" title="使用poi根据模板生成excel"></a>使用poi根据模板生成excel</h2><h3 id="1-导入相关jar包"><a href="#1-导入相关jar包" class="headerlink" title="1.导入相关jar包"></a>1.导入相关jar包</h3><ul><li>poi.jar</li><li>poi-ooxml.jar</li><li>poi-examples.jar</li><li>poi-excelant.jar</li><li>poi-ooxml-schemas.jar</li><li>poi-scratchpad.jar</li></ul><p>pom文件相关配置如下，以3.17版本为例。<a href="http://poi.apache.org/download.html" target="_blank" rel="noopener">传送门</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-examples<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-excelant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-scratchpad<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-读取模板填充新数据"><a href="#2-读取模板填充新数据" class="headerlink" title="2.读取模板填充新数据"></a>2.读取模板填充新数据</h3><p>HSSFWorkbook是Excel2003版本之前的操作方式，扩展名为.xls</p><p>XSSFWorkbook是Excel2007版本之后的操作方式，扩展名为.xlsx</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoiReadExcel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String path = <span class="string">"C:\\Users\\xxxx\\Desktop\\TestModul.xlsx"</span>;</span><br><span class="line">String targetPath = <span class="string">"C:\\Users\\xxxxx\\Desktop\\TestSuccess.xlsx"</span>;</span><br><span class="line">File file = <span class="keyword">new</span> File(path);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1.创建工作薄workbook对象</span></span><br><span class="line">XSSFWorkbook xfw = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">                <span class="comment">//2.根据sheet的名称获取相应的sheet页对象</span></span><br><span class="line">XSSFSheet xs = xfw.getSheet(<span class="string">"Sheet1"</span>);</span><br><span class="line">                <span class="comment">//3.设置自动计算，</span></span><br><span class="line">xs.setForceFormulaRecalculation(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">5</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                    <span class="comment">//4.在excel表插入一行数据的时候一定要将当前以后的表格向下移动一行，否则不生效</span></span><br><span class="line">xs.shiftRows(i, xs.getLastRowNum(), <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//5.创建新的一行</span></span><br><span class="line">XSSFRow row = xs.createRow(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;<span class="number">2</span>;y++)&#123;</span><br><span class="line">                        <span class="comment">//6.获取这一行的某一列的单元格</span></span><br><span class="line">XSSFCell cell = row.createCell(y);</span><br><span class="line">                        <span class="comment">//因为我这里是插入新的一行，没有样式，此处为将下一行的单元格格式复制给新插入的行</span></span><br><span class="line">cell.setCellStyle(xs.getRow(i+<span class="number">1</span>).getCell(y).getCellStyle());</span><br><span class="line">String str = <span class="string">"-0.123456"</span>;</span><br><span class="line">Boolean isnum = str.matches(<span class="string">"-[0-9]+(.[0-9]+)?|[0-9]+(.[0-9]+)?"</span>);</span><br><span class="line">System.out.println(isnum);</span><br><span class="line"><span class="keyword">if</span>(isnum)&#123;</span><br><span class="line">                            <span class="comment">//7.这里要注意，excel表中有单元格格式，例如百分比，数值，文本等。如果如果是数字在填充单元格的时候要转换成Double类型的，否则就会变成纯文本。</span></span><br><span class="line">cell.setCellValue(Double.valueOf(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">/*结语：直接给sheet页赋值只需要使用sheet.getRow(1).getCell(1).setCellValue(1);在此过程中记得对Row和Cell，因为从模板中拿出来的行和单元格并不一定有值。否则很容易NullPointerException</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(targetPath);</span><br><span class="line">xfw.write(out);</span><br><span class="line">                out.close();</span><br><span class="line">xfw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"Not Found This File ::"</span> + path);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-常用方法扩充"><a href="#3-常用方法扩充" class="headerlink" title="3.常用方法扩充"></a>3.常用方法扩充</h3><table><thead><tr><th style="text-align:left">方法名称</th><th style="text-align:left">方法说明</th></tr></thead><tbody><tr><td style="text-align:left">getRowStyle()</td><td style="text-align:left">获取一行的样式</td></tr><tr><td style="text-align:left">getRowStyle().getFillForegroundXSSFColor();</td><td style="text-align:left">获取此行的当前背景颜色(excel默认格式所带颜色读取不出来，在excel表中查看当前行背景颜色也为空白)</td></tr></tbody></table><h3 id="4-问题以及想法"><a href="#4-问题以及想法" class="headerlink" title="4.问题以及想法"></a>4.问题以及想法</h3><p>​        poi自身对于excel的支持算是比较高的了，当excel表中装有第三方插件，需要用到第三方插件库的函数时，例如wind,无法去掉wind函数公式，只留数值。尝试过用宏来实现去公式，但需要一台window服务器暂且不说，还得excel的模板中先预先设置好相同名称的宏比较麻烦，最后在测试过程中使用宏来去公式的确可以实现，但是在程序调用过程中excel报错提示信息太多。最终也没有找到满意的解决方案。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用poi根据模板生成excel&quot;&gt;&lt;a href=&quot;#使用poi根据模板生成excel&quot; class=&quot;headerlink&quot; title=&quot;使用poi根据模板生成excel&quot;&gt;&lt;/a&gt;使用poi根据模板生成excel&lt;/h2&gt;&lt;h3 id=&quot;1-导入相关jar
      
    
    </summary>
    
    
      <category term="Java" scheme="https://panruipr.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+gitHub搭建个人博客</title>
    <link href="https://panruipr.github.io/2018/06/05/Hexo-gitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://panruipr.github.io/2018/06/05/Hexo-gitHub搭建个人博客/</id>
    <published>2018-06-05T08:31:18.000Z</published>
    <updated>2018-10-08T03:04:30.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-gitHub搭建个人博客，linux系统为centOs7"><a href="#Hexo-gitHub搭建个人博客，linux系统为centOs7" class="headerlink" title="Hexo+gitHub搭建个人博客，linux系统为centOs7"></a>Hexo+gitHub搭建个人博客，linux系统为centOs7</h2><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p>查看linuxs服务版本信息 uname -a;<br>wget <a href="https://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.xz</a> 下载安装包</p><ol start="2"><li>解压到当前文件夹<br>tar -xvf node-v8.11.2-linux-x64.tar.xz    解压<br>mv node-v8.11.2-linux-x64.tar.xz  node-v8.11.2  更名<br>cd node-v8.11.2  pwd 获取当前目录路径</li><li>配置环境变量(和配置java环境变量差不多)<br>vi /etc/profile<br>定义一个别名 NODE_HOME=/home/panrui/node-v8.11.2<br>像path中加入bin目录 :NODE_HOME/bin<br>然后导入配置 export里加上 NODE_HOME<br>source profile</li><li>检查nodejs是否安装成功<br>node -v    出现版本信息就证明安装成功</li></ol><h3 id="2-安装hexo和git"><a href="#2-安装hexo和git" class="headerlink" title="2.安装hexo和git"></a>2.安装hexo和git</h3><p>mkdir Hexo<br>cd Hexo<br>yum install git-core 安装git并安装依赖包<br>npm install -g hexo-cli 安装Hexo<br>hexo init 初始化Hexo</p><h3 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3.安装插件"></a>3.安装插件</h3><p>npm install hexo-generator-index –save<br>npm install hexo-generator-archive –save<br>npm install hexo-generator-category –save<br>npm install hexo-generator-tag –save<br>npm install hexo-server –save<br>npm install hexo-deployer-git –save<br>npm install hexo-deployer-heroku –save<br>npm install hexo-deployer-rsync –save<br>npm install hexo-deployer-openshift –save<br>npm install hexo-renderer-marked –save<br>npm install hexo-renderer-stylus –save<br>npm install hexo-generator-feed –save<br>npm install hexo-generator-sitemap –save</p><p>注意：插件必须要安装，不然之后执行命令的时候会报错：没有相关的指令，还有就是安装插件的时候必须在，Hexo文件目录下才能执行。有关Hexo的命令也都是在这个文件目录下执行。</p><p>启动hexo服务<br>hexo s<br>测试是否成功，在浏览器种范文locahost:4000默认端口是4000.如果是云服务就ip+port</p><h3 id="3-配置github-上传代码到git"><a href="#3-配置github-上传代码到git" class="headerlink" title="3.配置github 上传代码到git"></a>3.配置github 上传代码到git</h3><ol><li>cd ~/. ssh #检查本机是否存在的shh密钥</li><li>生成ssh密钥，执行一下代码<br>ssh-keygen -t -rsa -C ”邮件地址“</li><li>找到密钥存放地址<br>cat ~/.ssh/id_rsa.pub</li><li>登录git账户，在setting中add sshkey，将密钥粘贴进去并保存</li><li>建立一个仓库，项目名称必须是用户名.github.io 这个之后访问博客的地址。一定不能写错</li><li>配置hexo<br>vim _config,yml<br>deploy:<br>type: git<br>repository: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:panruipr/panruipr.github.io.git<br>branch: master<br>这里最好复制粘贴不要手打，冒号后面一定要跟一个空格，不然上传的时候没有任何反应，没有报错，代码也上传不成功,坑了我一个小时！</li><li>配置git邮件和用户名用来上传代码的时候，不配置会报错  你是谁？<br>git config –global user.name “panruipr”<br>git config –global user.email “<a href="mailto:xxxx@qq.com" target="_blank" rel="noopener">xxxx@qq.com</a>“</li><li>#上传代码<br>新建博客需要在source/_post文件目录下新建文件<br>hexo d 上传代码<br>hexo d -g 生成并上传</li></ol><p>最后就可以访问自己的博客了，例如<a href="https://panruipr.github.io">https://panruipr.github.io</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hexo-gitHub搭建个人博客，linux系统为centOs7&quot;&gt;&lt;a href=&quot;#Hexo-gitHub搭建个人博客，linux系统为centOs7&quot; class=&quot;headerlink&quot; title=&quot;Hexo+gitHub搭建个人博客，linux系统为
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://panruipr.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>linux初始安装以及jdk，apache，mysql环境安装部署</title>
    <link href="https://panruipr.github.io/2018/06/04/linux%E5%88%9D%E5%A7%8B%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Ajdk%EF%BC%8Capache%EF%BC%8Cmysql%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>https://panruipr.github.io/2018/06/04/linux初始安装以及jdk，apache，mysql环境安装部署/</id>
    <published>2018-06-04T08:34:29.000Z</published>
    <updated>2018-06-05T03:03:41.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux初始安装以及jdk，apache，mysql环境安装部署"><a href="#linux初始安装以及jdk，apache，mysql环境安装部署" class="headerlink" title="linux初始安装以及jdk，apache，mysql环境安装部署"></a>linux初始安装以及jdk，apache，mysql环境安装部署</h2><h3 id="1-购买第三方云服务相关准备工作"><a href="#1-购买第三方云服务相关准备工作" class="headerlink" title="1.购买第三方云服务相关准备工作"></a>1.购买第三方云服务相关准备工作</h3><ol><li>购买云服务器之后会自动创建一个实例。这里的选择是CentOS 7.2 64位操作系统的。可以根据自己的需求选择相应的操作系统和应用。</li><li>购买成功后到云主机界面重置主机密码，以方便xshell连接。</li><li>用xshell登录云服务器，创建新用户并分配相应的权限，以供学习用。<br>linux拓展命令：</li><li>查看用户：whoami #查看当前登陆用户的用户名<br>who am i #表示打开当前伪装端的用户的用户名<br>who mom likes #登陆人用户的详细信息<br>who 命令其他常用参数<br>参数  说明</li></ol><ul><li>-a  打印能打印的全部</li><li>-d  打印死掉的进程</li><li>-m  同am i,mom likes</li><li>-q  打印当前登录用户数及用户名</li><li>-u  打印当前登录用户登录信息</li><li>-r  打印运行等级</li></ul><h3 id="2-在centos-7下新建用户名并授权常用命令"><a href="#2-在centos-7下新建用户名并授权常用命令" class="headerlink" title="2.在centos 7下新建用户名并授权常用命令"></a>2.在centos 7下新建用户名并授权常用命令</h3><ol><li>新建用户useradd 用户名</li><li>新建groupadd 用户名</li><li>修改用户密码 passwd 用户名</li><li>删除用户userdel -r 用户名 删除用户以及相关的文件</li></ol><h3 id="3-设置防火墙"><a href="#3-设置防火墙" class="headerlink" title="3.设置防火墙"></a>3.设置防火墙</h3><p>因为22端口太容易被扫描到了，对于服务器来说不太安全。那就需要关闭22端口开放新的端口号作为ssh服务的端口<br>相关命令:<br>systemctl status firewalld.service  #查看防火墙状态<br>systemctl status sshd.service #查看ssh状态<br>systemctl stop/start/restart firewalld.service #关闭，开启，重启防火墙<br>systemctl stop/start/restart sshd.service #关闭，开启，重启sshd服务<br>firewalld-cmd –permanent –zone=public –add-port=57482/tcp #添加端口号<br>firewalld-cmd –permanent –zone=public –remove-port=57482/tcp #删除端口号<br>firewalld-cmd –list-all #查看端口列表</p><ol><li>cd /etc/ssh/sshd.config 找到#Port=22 默认端口为22，所以不管注释还是不注释都没用。在下面一行新增Port=57482</li><li>在centos7 里装辅助工具semanage yum provides semanage 主意装semanage需要安装其依赖工具包 yum install policycoreutils-python tab自动补全</li><li>查询当前ssh的端口号 semanage port -l | grep ssh<br>向其中添加新的端口号 semanage port -a -t ssh_port_t -p tcp 57482 再查询一遍端口看看是否配置成功</li><li>重启sshd.service服务  systemctl restart sshd.service</li><li>再防火墙中新增端口 firewalld-cmd –permanent –zone=public –add-port=57482/tcp 并重启</li><li>注意 如果是第三方服务器可以在安全组中自定义安全规则来阻止来自22端口的访问。</li></ol><p>开启防火墙关闭22端口配置只允许57482的端口之后ping不通了。。。,这个时候开放80端口在，在安全组中允许所有端口访问就可以ping通，不知道为什么只允许80端口通过并不能ping通</p><h3 id="4-安装jdk1-8"><a href="#4-安装jdk1-8" class="headerlink" title="4.安装jdk1.8"></a>4.安装jdk1.8</h3><ol><li>先官网下载linux版本的jdk1.8 也可以用内网下载，内网下载速度比较快一点<br>&ensp;wget –no-check-certificate –no-cookies –header “Cookie: oraclelicense=accept-securebackup-cookie” <a href="http://download.oracle.com/otn-pub/java/jdk/8u91-b14/jdk-8u91-linux-x64.tar.gz" target="_blank" rel="noopener">http://download.oracle.com/otn-pub/java/jdk/8u91-b14/jdk-8u91-linux-x64.tar.gz</a></li><li>一般jdk安装在/usr/local目录下。将文件解压到此目录下pwd一下获取路径</li><li>去/etc/profile文件中末尾配置java_home和jre_home简称环境变量，配置如下<br>JAVA_HOME=/usr/local/java/jdk1.8.0_171<br>JRE_HOME=$JAVA_HOME/jre<br>PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin<br>CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib<br>export JAVA_HOME JRE_HOME CLASS_PATH PATH</li><li>启用新的配置 source /etc/profile</li><li>查看是否安装成功 java -version 出现版本信息就代表安装成功。</li></ol><h3 id="5-配置tomcat"><a href="#5-配置tomcat" class="headerlink" title="5.配置tomcat"></a>5.配置tomcat</h3><ol><li>下载tomcat7到目标文件</li><li>cd tomcat7/bin 修改catalina,sh添加配置，在此之前保证jdk已经成功安装<br>JAVA_OPTS=”-Xms512m -Xmx1024m -Xss1024K -XX:PermSize=512m -XX:MaxPermSize=1024m”<br>export TOMCAT_HOME=/home/panrui/tomcat7<br>export CATALINA_HOME=/home/panrui/tomcat7<br>export JRE_HOME=/usr/local/java/jdk1.8.0_171/jre<br>export JAVA_HOME=/usr/local/java/jdk1.8.0_171</li><li>修改cd tomcat/conf 下的server.xml里的端口保证对外端口已经添加到防火墙中</li><li>修改第三方服务器安全组规则将新端口添加到允许访问的规则中</li><li>启动服务器./start.sh</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux初始安装以及jdk，apache，mysql环境安装部署&quot;&gt;&lt;a href=&quot;#linux初始安装以及jdk，apache，mysql环境安装部署&quot; class=&quot;headerlink&quot; title=&quot;linux初始安装以及jdk，apache，mysq
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://panruipr.github.io/tags/Linux/"/>
    
      <category term="云服务" scheme="https://panruipr.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
